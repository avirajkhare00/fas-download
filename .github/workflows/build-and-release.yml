name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test -v ./...

    - name: Run go vet
      run: go vet ./...

    - name: Run staticcheck
      uses: dominikh/staticcheck-action@v1.3.0
      with:
        version: "2023.1.6"

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))

    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            name: linux-amd64
          - goos: linux
            goarch: arm64
            name: linux-arm64
          - goos: darwin
            goarch: amd64
            name: darwin-amd64
          - goos: darwin
            goarch: arm64
            name: darwin-arm64
          - goos: windows
            goarch: amd64
            name: windows-amd64
            ext: .exe
          - goos: windows
            goarch: arm64
            name: windows-arm64
            ext: .exe

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        mkdir -p dist
        go build -ldflags="-s -w" -o dist/fas-download-${{ matrix.name }}${{ matrix.ext }} .

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: fas-download-${{ matrix.name }}
        path: dist/fas-download-${{ matrix.name }}${{ matrix.ext }}
        retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: dist

    - name: Create checksums
      run: |
        cd dist
        find . -name "fas-download-*" -type f -exec sha256sum {} \; > checksums.txt
        cat checksums.txt

    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*/fas-download-*
          dist/checksums.txt
                 body: |
           ## Changes

           See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for detailed changes.

           ## Download

           Choose the appropriate binary for your platform:

           - **Linux AMD64**: `fas-download-linux-amd64`
           - **Linux ARM64**: `fas-download-linux-arm64`
           - **macOS AMD64**: `fas-download-darwin-amd64`
           - **macOS ARM64**: `fas-download-darwin-arm64` (Apple Silicon)
           - **Windows AMD64**: `fas-download-windows-amd64.exe`
           - **Windows ARM64**: `fas-download-windows-arm64.exe`

           ## Installation

           1. Download the appropriate binary for your platform
           2. Make it executable: `chmod +x fas-download-*` (Linux/macOS)
           3. Move to your PATH: `mv fas-download-* /usr/local/bin/fas-download`

           ## Usage

           Create a config.yaml file:
           ```yaml
           url: https://example.com/file.zip
           ```

           Run the downloader:
           ```bash
           fas-download config.yaml
           ```

           ## Checksums

           Verify your download using the checksums in `checksums.txt`.
        draft: false
        prerelease: false
            env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
